//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `UserListViewController`.
    static let userListViewController = _R.storyboard.userListViewController()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "UserListViewController", bundle: ...)`
    static func userListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userListViewController)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Hermit-Bold.otf`.
    static let hermitBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Hermit-Bold", pathExtension: "otf")
    /// Resource file `Hermit-Light.otf`.
    static let hermitLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Hermit-Light", pathExtension: "otf")
    /// Resource file `octocat.json`.
    static let octocatJson = Rswift.FileResource(bundle: R.hostingBundle, name: "octocat", pathExtension: "json")
    /// Resource file `response.json`.
    static let responseJson = Rswift.FileResource(bundle: R.hostingBundle, name: "response", pathExtension: "json")

    /// `bundle.url(forResource: "Hermit-Bold", withExtension: "otf")`
    static func hermitBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hermitBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Hermit-Light", withExtension: "otf")`
    static func hermitLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hermitLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "octocat", withExtension: "json")`
    static func octocatJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.octocatJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "response", withExtension: "json")`
    static func responseJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.responseJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `Hermit-Bold`.
    static let hermitBold = Rswift.FontResource(fontName: "Hermit-Bold")
    /// Font `Hermit-Light`.
    static let hermitLight = Rswift.FontResource(fontName: "Hermit-Light")

    /// `UIFont(name: "Hermit-Bold", size: ...)`
    static func hermitBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hermitBold, size: size)
    }

    /// `UIFont(name: "Hermit-Light", size: ...)`
    static func hermitLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hermitLight, size: size)
    }

    static func validate() throws {
      if R.font.hermitBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Hermit-Bold' could not be loaded, is 'Hermit-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.hermitLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Hermit-Light' could not be loaded, is 'Hermit-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `left`.
    static let left = Rswift.ImageResource(bundle: R.hostingBundle, name: "left")
    /// Image `octocat`.
    static let octocat = Rswift.ImageResource(bundle: R.hostingBundle, name: "octocat")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "right")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left", bundle: ..., traitCollection: ...)`
    static func left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "octocat", bundle: ..., traitCollection: ...)`
    static func octocat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.octocat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `UserListTableViewCell`.
    static let userListTableViewCell = _R.nib._UserListTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userListTableViewCell) instead")
    static func userListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userListTableViewCell)
    }
    #endif

    static func userListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserListTableViewCell? {
      return R.nib.userListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserListTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `UserListTableViewCell`.
    static let userListTableViewCell: Rswift.ReuseIdentifier<UserListTableViewCell> = Rswift.ReuseIdentifier(identifier: "UserListTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 1 localization keys.
    struct launchScreen {
      /// ja translation: Find Users
      ///
      /// Locales: ja
      static let r6VDKL5YText = Rswift.StringResource(key: "R6V-dK-l5Y.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["ja"], comment: nil)

      /// ja translation: Find Users
      ///
      /// Locales: ja
      static func r6VDKL5YText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R6V-dK-l5Y.text", tableName: "LaunchScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LaunchScreen", preferredLanguages: preferredLanguages) else {
          return "R6V-dK-l5Y.text"
        }

        return NSLocalizedString("R6V-dK-l5Y.text", tableName: "LaunchScreen", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizables` struct is generated, and contains static references to 5 localization keys.
    struct localizables {
      /// en translation: 0 Search Results
      ///
      /// Locales: en, ja
      static let searchResults = Rswift.StringResource(key: "0 Search Results", tableName: "Localizables", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, ja
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizables", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, ja
      static let error = Rswift.StringResource(key: "Error", tableName: "Localizables", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Search from here
      ///
      /// Locales: en, ja
      static let searchFromHere = Rswift.StringResource(key: "Search from here", tableName: "Localizables", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: page
      ///
      /// Locales: en, ja
      static let page = Rswift.StringResource(key: "page", tableName: "Localizables", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)

      /// en translation: 0 Search Results
      ///
      /// Locales: en, ja
      static func searchResults(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0 Search Results", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "0 Search Results"
        }

        return NSLocalizedString("0 Search Results", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, ja
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, ja
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "Error"
        }

        return NSLocalizedString("Error", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: Search from here
      ///
      /// Locales: en, ja
      static func searchFromHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search from here", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "Search from here"
        }

        return NSLocalizedString("Search from here", tableName: "Localizables", bundle: bundle, comment: "")
      }

      /// en translation: page
      ///
      /// Locales: en, ja
      static func page(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("page", tableName: "Localizables", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizables", preferredLanguages: preferredLanguages) else {
          return "page"
        }

        return NSLocalizedString("page", tableName: "Localizables", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _UserListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UserListTableViewCell

      let bundle = R.hostingBundle
      let identifier = "UserListTableViewCell"
      let name = "UserListTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserListTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try userListViewController.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "octocat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'octocat' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct userListViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "UserListViewController"

      static func validate() throws {
        if UIKit.UIImage(named: "left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left' is used in storyboard 'UserListViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right' is used in storyboard 'UserListViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'UserListViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
